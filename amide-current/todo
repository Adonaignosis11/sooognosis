misc list of things todo:


for next release?
-----------------

* finish dnd support:
	-for some reason, the row_reordered signal isn't emitted, so I can't
	detect what's been done.
	-need to uncomment gtk_tree_view-set_reorderable line
	-filtered/cropped object should be added right below the
		predecessor object
       
big things:
-----------
* having issues with the "queing" of redisplay calls due to lack of locking.  
	need to switch to a full threading modeling to separate input/computation/display. 
* add drag-n-drop capabilities between study windows
* should be able to specify units the image is in, and request different output units.
	-allow changing of displayed units (mm, cm, m, s, min, uCi, Beq, etc.)
	-study would have an output units variable
	-each data set, can specify it's original units, and (if needed), a scaling factor to output unit
* progress bars
* ui_series should show all selected objects, not just data sets
	-would require generalizing some of the drawing functions in amitk_canvas
* add a objects list item,
	-would allow reading in multi-bed data sets
* calculating PV correction.  
	Correction factors could be calculated for each volume's 
	resolution and then cached.
* currently implementation for FIR filters is via direct convolution:
	a FFT based approach would be much more efficient
	in the interests of memory, would probably do a overlap+add method,
		with a 64 point FFT (which is 2MB for double)
	GSL has the necessary functions for doing the FFT
                       
small things:
-------------
* double clicking on canvas leads to unending grab -> a release event isn't sent for some reason
* if the interpolation of a data set is changed in ui_series, the already
	created slices aren't changed
* the "system" function sometimes fails to execute in movie_generate, this 
	appears to be an out of memory problem.
* some weird sort of bug with ui_series, where after closing a series, 
	opening another and then setting threshold, it crashes
* warning message on closing of ui_rendering dialog, reference counting
	of something in gtk is off, not sure what
* would changing the icons to .png files allow anti-aliasing? better icons?
* rewrite isocontour determining algorithm so it's not recursive
* put the canvases in a scrolled widget?
* make caching of slices smarter.  
	We don't need to regenerate all slices when removing one slice from the list
	slices shouldn't have to be the size of the largest dimensions
* fix zooming of roi's on the canvas
* should all voxel's that an roi edge passes through be displayed?
* implement help buttons on most of the dialogs
	-gnome_druid has an add help button function
* add close button to threshold dialogs
* ui_time_dialog shouldn't show so much precision on times
* rendering movie generation should allow rotating around one axis, then another, then another
	maybe an ability to script the movie?
* try to work in the max/min/distribution calculations into the loading loop
* one small warning when loading help (doesn't impact operation):
	warning: failed to load external entity "No table of content available for this document."


pre 1.0 things:
--------------
* change all dialog boxes to verbs
* rewrite documentation
* start commenting the widgets, run gtk-doc to generate documentation
* check README's, INSTALL guides, etc.
* check that make distcheck works
* write a man page
* add tooltips to everything....


probably post 1.0 things:
----------------
* multi-step undo/redo
* add report generation.  This would add colormaps, location, thickness
	study name, volume name, scan date, etc. to the export function.
	Would handle multiple images.
* rendering alterations -> 
	3D red/green imaging
	allow rotation of light source and view in addition to object
	allow changing of material properties
	transformation to rendering structure is inefficient when doing multiple volumes,
		each volume should be transfered using it's minimal voxel size, not the
		group's maximum minimal voxel size.  the rendered images should then be scaled
		and overlapped.  
* change mpeg_encode to a library? 
	would allow loss of "system" command, and proper 
	progress reports, in ui_rendering_movie_dialog
* aligning of data using automated registration?
* preset thresholds (bone window, fat window, etc.)
* could probably subclass isocontour's from AmitkRoi -> AimtkIsocontourRoi
	also probably get rid of roi_variable types... not worth the performance improvement
* guppi interface for drawing graphs of ROI statistics
* optimize median filtering:
	M. Kopp, W. Purgathofer (1994). Efficient 3x3 Median Filter Computations. Technical University, Vienna.
	http://www.cg.tuwien.ac.at/research/TR/, TR-186-2-94-18

	-perhaps better, as we won't just have 3x3 median filtering,
	Paeth, 1990, Graphics Gems


things dependent on other things: 
-------------- 

* complete change to anti-aliased canvases
	check with newer version of libgnomecanvas ( > 2.0.1-3)
	- all canvases are now anti-aliased except for two:
	  1- amitk_canvas, canvas coredumps occasionally (not stable)
	  2- ui_preferences, line_style not followed by libart....

* ui_time_dialog specifies AmitkDataSet as G_TYPE_POINTER instead of
	AMITK_TYPE_OBJECT when setting up gtk_list_store - this is due
	to a gtk bug, adds a reference with G_TYPE_OBJECT but doesn't
	remove it
	- also in amitk_tree.c, ui_alignment_dialog.c

* at some point, GtkGammaCurve will probably be deprecated from Gtk,
	can either copy the code into amide, or come up with something
	more fitting

* when bug-buddy supports sourceforge bug reporting,
	delete the following line from amide.c so we can have bug reporting
	"signal(SIGSEGV, SIG_DFL);"

* there's a bunch of places where I'm attaching a widget to an object's signal,
	then I need to remove those attachments when the widget is destroyed...
	you would think there would be a way for this to happen automatically...

* remove no-ops in raw_data.c
	I've needed this (at least) for gcc <= 3.0.3.  Left in for the moment as
	I haven't tested gcc 3.1 for this bug, and other people may be using
	old versions of gcc.

* currently, alpha blending is done inside of image.c, a single pixbuf is generated,
	and this is handed to gnome_canvas.  It'd be nice to use separate pixbuf's but 
	each data set, and throwing them on the canvas.  The single biggest problem with this is 
	that the background buffer in gnome_canvas is RGB, not RGBA, so the buffer has an effective
	alpha of 0xFF, and you're just blending the image with whatever that background is, 
	screwing up the color levels.  may have to rewrite libgnomecanvas to use
	a 32bit buffer
	-would allow the use of cursor keys for moving data sets around each other


* using the gdk_pixbuf_scale functions
	Slicing from all data sets at zoom=1.0, and then scaling using
	the gdk_pixbuf_scale type functions doesn't work well, as the
	scale functions don't do a great job of interpolation (circa
	gdk-pixbuf-0.18.0).


remaining GNOME 2.0 changes that need to be done 
----------------------------------------------------
* enable GNOME_DISABLE_DEPRECATED on compile
	-need to replace the use of gnome_request_dialog in ui_study.c

* should replace gnome_config with gconf
