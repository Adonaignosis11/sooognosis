misc list of things todo:

for next release?
-----------------

* test flat file xif on big endian architecture

* be able to generate line profiles.  You specify 2 points...
  -page 1, list of points (pick 1)
  -page 2, list of points (pick 1)
  -page 3, graph of line profile, option to save

* ability to import and export AIR .air files
* histogram for roi's
  - probably an option on the ROI stat's pop-up

* continue implementing progress bars for various functions:
	-roi analysis
	-loading in data sets


windows todo
------------
* will have to figure out how to get libfame's m4 file working
* preferences aren't currently saved between amide sessions
* get popt working, then can have file associations with .xif files
	-specify icon for .xif files
* zdial on rendering doesn't work
* figure out how to lose the black text window 

factor analysis things:
-----------------------       
* factor analysis -> should be able to do from ROI's too.
	should be simple.  1 iteration to find the # of voxels,
	second iteration to fill in 
	probable use weight >=0.5 as cutoff
* need to add orthogonality component back into PLS
* principle component analysis should probably be demeaned
* need to extend 2 comp to 3 comp (or n-comp)
* should be able to combine main function for fads and comp models


big things:
-----------
* add drag-n-drop capabilities between study windows
	-need to uncomment gtk_tree_view-set_reorderable line (this approach may not work)
	-filtered/cropped object should be added right below the predecessor object
* should be able to specify units the image is in, and request different output units.
	-allow changing of displayed units (mm, cm, m, s, min, uCi, Beq, etc.)
	-study would have an output units variable
	-each data set, can specify it's original units, and (if needed), a scaling factor to output unit
	-ui_preferences would change default units
	-need gobject based approach, so widgets can listen for change
* add a data sets list item,
	-would allow reading in multi-bed data sets
* calculating PV correction.  
	Correction factors could be calculated for each volume's 
	resolution and then cached.
* multi-step undo/redo, look into how other GTK apps do it
	-once this is done, drop the enact/cancel bit of shifting data sets and study's
	  as we can now just undo such a change
 


                       
small things:
-------------
* sliders don't work currently under Xwin32, stopped working 
	after 0.7.6 (addition of optional transverse/coronal/etc. buttons).
* be able to change type/down convert on crop dialog
	specify if single, multiple scale factors
* need to switch gtk_idle (deprecated) calls to g_source calls
* try to work in the max/min/distribution calculations into the loading loop
* would changing the icons to .png files allow anti-aliasing? better icons?
* fix zooming of off angle roi's on the canvas
* should all voxel's that an roi edge passes through be displayed?
        -would mean creating roi canvas object as pixmap, similar to isocontour
* implement help buttons on most of the dialogs
	-gnome_druid has an add help button function
* rendering movie generation should allow rotating around one axis, then another, then another
	maybe an ability to script the movie?
* ui_series, should add popup dialog asking for # columns and rows
* default color table -> doesn't work for data sets loaded from command line
* fly through's don't output ROI's, fiducial marks.
* ui_series, should be able to export 


pre 1.0 things:
--------------
* try to change dialog box buttons to verbs
* rewrite documentation
* start commenting the widgets, run gtk-doc to generate documentation
* check README's, INSTALL guides, etc.
* check that make distcheck works
* write a man page
* add tooltips to everything....


probably post 1.0 things:
----------------
* add report generation.  This would add colormaps, location, thickness
	study name, volume name, scan date, etc. to the export function.
	Would handle multiple images.
* rendering alterations -> 
	3D red/green imaging
	allow rotation of light source and view in addition to object
	allow changing of material properties
	transformation to rendering structure is inefficient when doing multiple volumes,
		each volume should be transfered using it's minimal voxel size, not the
		group's maximum minimal voxel size.  the rendered images should then be scaled
		and overlapped.  
	MIP rendering would be nice....
* aligning of data using automated registration?
* preset thresholds (bone window, fat window, etc.)
* could probably subclass isocontour's from AmitkRoi -> AimtkIsocontourRoi
	also probably get rid of amitk_roi_variable_types.c... not worth the performance improvement


things dependent on other things: 
-------------- 

* AMIDE_OSX_HACKS, on OS X we currently
	1- Disable interaction with ESD (enlightenment sound daemon).
           If amide crashed, ESD was locking files....  This is as of
	   fink 0.5.2, OS X 10.2.5


* anti-aliased canvases doesn't support GDK line styles (as of libgnomecanvas 2.2.0)
        -ui_preferences_dialog, and amitk_object_dialog have commented out code for
	 implementing this as a user choice, once anti-aliased canvases support line styles

* ui_time_dialog specifies AmitkDataSet as G_TYPE_POINTER instead of
	AMITK_TYPE_OBJECT when setting up gtk_list_store - this is due
	to a gtk bug, adds a reference with G_TYPE_OBJECT but doesn't
	remove it
	- also in amitk_tree.c, ui_alignment_dialog.c

* at some point, GtkGammaCurve will probably be deprecated from Gtk,
	can either copy the code into amide, or come up with something
	more fitting

* when bug-buddy supports sourceforge bug reporting,
	delete the following line from amide.c so we can have bug reporting
	"signal(SIGSEGV, SIG_DFL);"

* remove no-ops in raw_data.c
	I've needed this (at least) for gcc <= 3.0.3.  Left in for the moment as
	I haven't tested gcc 3.1 for this bug, and other people may be using
	old versions of gcc.

* currently, alpha blending is done inside of image.c, a single pixbuf is generated,
	and this is handed to gnome_canvas.  It'd be nice to use separate pixbuf's but 
	each data set, and throwing them on the canvas.  The single biggest problem with this is 
	that the background buffer in gnome_canvas is RGB, not RGBA, so the buffer has an effective
	alpha of 0xFF, and you're just blending the image with whatever that background is, 
	screwing up the color levels.  may have to rewrite libgnomecanvas to use
	a 32bit buffer
	-would allow the use of cursor keys for moving data sets around each other


* using the gdk_pixbuf_scale functions
	Slicing from all data sets at zoom=1.0, and then scaling using
	the gdk_pixbuf_scale type functions doesn't work well, as the
	scale functions don't do a great job of interpolation (circa
	gdk-pixbuf-0.18.0).

* Current implementation is cooperative multitasking, if that.  Should turn
	program into a true, multi-threaded design.  Note that gtk for windows
	(as of 2003.04.30) does not handle multi-threaded program.... so will
	have to wait for that.

* Problem with guessing Concorde .dat files.  If the data_file entry
       	in a concorde file is incorrect, (X)MedCon (0.8.12 at this writing) attempts 
	to guess the name by dropping the .hdr off the header file name.  For
	some reason, you get a truncated file read error from both AMIDE and
	xmedcon if a file is loaded in this way.  However, loading in the same
	file by specifying it on the command line works....

* libmdc currently links against glib1.  When (X)MedCon switches to
	GTK2/GLib2, remove the line in configure.in that overwrites
	the XMEDCON_LIBS entry.  Also, XMEDCON_CFLAGS can probably
	be includes in src/Makefile.am

* drawing graphics of ROI statistics, etc.
	Can't use Guppi, it's unmaintained and deprecated.  Hopefully the 
	gnumeric project will come out with a library for drawing charts/etc 
	at some point in the future.


