misc list of things todo:

for next release?
-----------------

for Chris-> check what pixels are shown for an ROI edge
roi stats -> on single pane for statics
tb_fads -> doesn't compile without gsl

* look into undo - gnumeric?
* profile wizard?
* histogram for roi's
* still get crash on axis
        mac_os -> disable axis thingie?
* ESD locks file on Mac OS X
* On Mac OS X -> make help area show correct key combo

* figure out how to do variance correctly....

* finish dnd support:
	-need to uncomment gtk_tree_view-set_reorderable line
	-filtered/cropped object should be added right below the
		predecessor object

* need to add orthogonality component back into PLS
* principle component analysis should probably be demeaned
* need to extend 2 comp to 3 comp (or n-comp)
* should be able to combine main function for fads and comp models

* continue implementing progress bars for various functions:
	-roi analysis
	-loading in data sets

       
big things:
-----------
* currently implementation for FIR filters is via direct convolution:
	a FFT based approach would be much more efficient
	in the interests of memory, would probably do a overlap+add method,
		with a 64 point FFT (which is 2MB for double)
	GSL has the necessary functions for doing the FFT
* add drag-n-drop capabilities between study windows
* should be able to specify units the image is in, and request different output units.
	-allow changing of displayed units (mm, cm, m, s, min, uCi, Beq, etc.)
	-study would have an output units variable
	-each data set, can specify it's original units, and (if needed), a scaling factor to output unit
	-ui_preferences would change default units
* add a data sets list item,
	-would allow reading in multi-bed data sets
* calculating PV correction.  
	Correction factors could be calculated for each volume's 
	resolution and then cached.
* allow option to save .xif file as flat file
	make the entire study tree one xml tree, rather than separate files
	instead of storing binary data filenames, have locations in single file
	xmlDocDump () this to the end of the binary data
	first entry in binary file pointer to the xml data
	add amitkdir ability to identify these files also


                       
small things:
-------------
* be able to change type/down convert on crop dialog
* need to switch gtk_idle (deprecated) calls to g_source calls
* try to work in the max/min/distribution calculations into the loading loop
* if the interpolation of a data set is changed in ui_series, the already
	created slices aren't changed
* would changing the icons to .png files allow anti-aliasing? better icons?
* rewrite isocontour determining algorithm so it's not recursive
* fix zooming of roi's on the canvas
* should all voxel's that an roi edge passes through be displayed?
* implement help buttons on most of the dialogs
	-gnome_druid has an add help button function
* rendering movie generation should allow rotating around one axis, then another, then another
	maybe an ability to script the movie?
* ui_series, should add popup dialog asking for # columns and rows


pre 1.0 things:
--------------
* change all dialog boxes to verbs?
* rewrite documentation
* start commenting the widgets, run gtk-doc to generate documentation
* check README's, INSTALL guides, etc.
* check that make distcheck works
* write a man page
* add tooltips to everything....


probably post 1.0 things:
----------------
* multi-step undo/redo
	-once this is done, drop the enact/cancel bit of shifting data sets and study's
	  as we can now just undo such a change
* add report generation.  This would add colormaps, location, thickness
	study name, volume name, scan date, etc. to the export function.
	Would handle multiple images.
* rendering alterations -> 
	3D red/green imaging
	allow rotation of light source and view in addition to object
	allow changing of material properties
	transformation to rendering structure is inefficient when doing multiple volumes,
		each volume should be transfered using it's minimal voxel size, not the
		group's maximum minimal voxel size.  the rendered images should then be scaled
		and overlapped.  
	MIP rendering would be nice....
* aligning of data using automated registration?
* preset thresholds (bone window, fat window, etc.)
* could probably subclass isocontour's from AmitkRoi -> AimtkIsocontourRoi
	also probably get rid of amitk_roi_variable_types.c... not worth the performance improvement
* guppi interface for drawing graphs of ROI statistics
	guppi needs to stabilize first, and needs to get incorporated into standard distributions
* optimize median filtering:
	M. Kopp, W. Purgathofer (1994). Efficient 3x3 Median Filter Computations. Technical University, Vienna.
	http://www.cg.tuwien.ac.at/research/TR/, TR-186-2-94-18

	-perhaps better, as we won't just have 3x3 median filtering,
	Paeth, 1990, Graphics Gems
* be able to generate line profiles.  You specify 2 points...


things dependent on other things: 
-------------- 

* complete change to anti-aliased canvases
	check with newer version of libgnomecanvas ( > 2.0.1-3)
	- all canvases are now anti-aliased except for three:
	  1- amitk_canvas, canvas coredumps occasionally (not stable?)
	  2- ui_series, same as above
	  3- ui_preferences, line_style not followed by libart....

* ui_time_dialog specifies AmitkDataSet as G_TYPE_POINTER instead of
	AMITK_TYPE_OBJECT when setting up gtk_list_store - this is due
	to a gtk bug, adds a reference with G_TYPE_OBJECT but doesn't
	remove it
	- also in amitk_tree.c, ui_alignment_dialog.c

* at some point, GtkGammaCurve will probably be deprecated from Gtk,
	can either copy the code into amide, or come up with something
	more fitting

* when bug-buddy supports sourceforge bug reporting,
	delete the following line from amide.c so we can have bug reporting
	"signal(SIGSEGV, SIG_DFL);"

* remove no-ops in raw_data.c
	I've needed this (at least) for gcc <= 3.0.3.  Left in for the moment as
	I haven't tested gcc 3.1 for this bug, and other people may be using
	old versions of gcc.

* currently, alpha blending is done inside of image.c, a single pixbuf is generated,
	and this is handed to gnome_canvas.  It'd be nice to use separate pixbuf's but 
	each data set, and throwing them on the canvas.  The single biggest problem with this is 
	that the background buffer in gnome_canvas is RGB, not RGBA, so the buffer has an effective
	alpha of 0xFF, and you're just blending the image with whatever that background is, 
	screwing up the color levels.  may have to rewrite libgnomecanvas to use
	a 32bit buffer
	-would allow the use of cursor keys for moving data sets around each other


* using the gdk_pixbuf_scale functions
	Slicing from all data sets at zoom=1.0, and then scaling using
	the gdk_pixbuf_scale type functions doesn't work well, as the
	scale functions don't do a great job of interpolation (circa
	gdk-pixbuf-0.18.0).

* Current implementation is cooperative multitasking, if that.  Should turn
	program into a true, multi-threaded design.  Note that gtk for windows
	(as of 2003.04.30) does not handle multi-threaded program.... so will
	have to wait for that.

