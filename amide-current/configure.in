AC_PREREQ(2.53)
AC_INIT([amide],[0.7.8],[amide-users@lists.sourceforge.net])

AC_CONFIG_SRCDIR(src/amide.c)
AM_CONFIG_HEADER(amide_config.h)

AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)


AM_MAINTAINER_MODE

dnl AC_ISC_POSIX
AC_PROG_CC
AM_PROG_LIBTOOL
dnl AC_PROG_INTLTOOL
dnl AC_HEADER_STDC([])
dnl AC_ARG_PROGRAM
AC_PATH_PROGS(M4, gnum4 gm4 m4, m4)

dnl pick our optimization level, OSX's version of gcc doesn't handle -O6
case "$host_os" in
darwin*) 	CFLAGS="-g -O2 -Wall";;
*)		CFLAGS="-g -O6 -Wall";;
esac

if test $CC = "gcc"; then
	echo -n "checking version of gcc... "
	CC_VERSION=`$CC -dumpversion`
	if (test $CC_VERSION = "2.96" || test $$CC_VERSION = "2.95.4"); then
		echo $CC_VERSION
		echo "******************************************************************"
		echo "This version of gcc is a beta compiler and often incorrectly"
		echo "compiles this program.  Please upgrade to the current version of"
		echo "gcc (3.2.1 as of this writing) or downgrade to 2.95.3"
		echo "******************************************************************"
		echo -n "continue anyway? (y/n) "
		read continue_with_bad_gcc
		if test $continue_with_bad_gcc = "y"; then
			echo "removing optimizations to reduce potential of compiler error"
			CFLAGS="-g -O0"
		else
			exit 1
		fi
	else
		echo "$CC_VERSION, good"
	fi
fi

PKG_CHECK_MODULES(AMIDE_GNOME,[
	glib-2.0	>= 2.0.0
	gobject-2.0	>= 2.0.0
	gtk+-2.0	>= 2.0.0
	libxml-2.0	>= 2.4.12
	libgnomeui-2.0  >= 2.0.0
	libgnomecanvas-2.0 >= 1.113.0
	gdk-pixbuf-2.0	>= 0.14.0
])
AC_SUBST(AMIDE_GNOME_LIBS)
AC_SUBST(AMIDE_GNOME_CFLAGS)

dnl glib-genmarshal
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)


dnl GNOME_COMPILE_WARNINGS
dnl ALL_LINGUAS=
dnl AM_GNU_GETTEXT







################################################################
# Checks for gtk-doc and docbook-tools, from gtk's configure.in
################################################################

AC_ARG_WITH(html-dir, [  --with-html-dir=PATH    path to installed docs ])

if test "x$with_html_dir" = "x" ; then
  HTML_DIR='${datadir}/gtk-doc/html'
else
  HTML_DIR=$with_html_dir
fi

AC_SUBST(HTML_DIR)

AC_CHECK_PROG(GTKDOC, gtkdoc-mkdb, true, false)

gtk_doc_min_version=0.9
if $GTKDOC ; then 
    gtk_doc_version=`gtkdoc-mkdb --version`
    AC_MSG_CHECKING([gtk-doc version ($gtk_doc_version) >= $gtk_doc_min_version])
    if perl <<EOF ; then
      exit (("$gtk_doc_version" =~ /^[[0-9]]+\.[[0-9]]+$/) &&
            ("$gtk_doc_version" >= "$gtk_doc_min_version") ? 0 : 1);
EOF
      AC_MSG_RESULT(yes)
   else
      AC_MSG_RESULT(no)
      GTKDOC=false
   fi
fi

AC_CHECK_PROG(DB2HTML, db2html, true, false)
AM_CONDITIONAL(HAVE_DOCBOOK, $DB2HTML)

dnl Make people enable the gtk-doc stuff explicitely.
AC_ARG_ENABLE(gtk-doc, [  --enable-gtk-doc      use gtk-doc to build documentation [default=no]], enable_gtk_doc="$enableval", enable_gtk_doc=auto)

if test x$enable_gtk_doc = xyes ; then
  if test x$GTKDOC != xtrue ; then
    enable_gtk_doc=no 
  fi
fi

dnl NOTE: We need to use a separate automake conditional for this
dnl       to make this work with the tarballs.
AM_CONDITIONAL(ENABLE_GTK_DOC, test x$enable_gtk_doc = xyes)







##############################################################
### Checks for optional libraries
##############################################################

dnl check for various libraries and programs that we might need
AC_CHECK_LIB(gsl, gsl_error, FOUND_LIBGSL=yes, FOUND_LIBGSL=no, -lgslcblas -L/sw/lib)
AC_CHECK_LIB(ecat, matrix_open, FOUND_LIBECAT=yes, FOUND_LIBECAT=no, -L/sw/lib)
AC_CHECK_LIB(mdc, MdcOpenFile, FOUND_MEDCON=yes, FOUND_MEDCON=no, -L/sw/lib -lglib)
AC_CHECK_LIB(volpack, vpGetErrorString, FOUND_VOLPACK=yes, FOUND_VOLPACK=no, -lm -L/sw/lib)
AM_PATH_LIBFAME(0.9.0, FOUND_LIBFAME=yes, FOUND_LIBFAME=no)


dnl add the -no-cpp-precomp for macintosh os x
case "$host_os" in
darwin*) 	echo "removing preproccessor precompilition on macintosh os x" ; 
		CPPFLAGS="$CPPFLAGS -no-cpp-precomp" ;;
esac



dnl Let people compile without debugging information
AC_ARG_ENABLE(
	amide_debug, 
	[  --enable-amide-debug	Compile with some debugging messages [default=yes]], 
	enable_amide_debug="$enableval", 
	enable_amide_debug=yes)

if test $enable_amide_debug = yes; then
	echo "Compiling with AMIDE debugging messages"
	AMIDE_DEBUG_CFLAGS="-g"
	AC_SUBST(AMIDE_DEBUG_CFLAGS)
	AC_DEFINE(AMIDE_DEBUG, 1, Define to 1 to compile AMIDE with debugging information)
else
	echo "Compiling without AMIDE debugging messages"
fi


dnl let people compile without the GNU Scientific Library
AC_ARG_ENABLE(
	libgsl,
	[  --enable-libgsl	Comple using the GNU Scientific Library [default=yes]],
	enable_libgsl="$enableval",
	enable_libgsl=yes)

if (test $enable_libgsl = yes) && (test $FOUND_LIBGSL = yes); then
	echo "Compiling with GNU Scientific Library support"
	AMIDE_LIBGSL_LIBS="-lgsl -lgslcblas"
	AC_SUBST(AMIDE_LIBGSL_LIBS)
	AC_DEFINE(AMIDE_LIBGSL_SUPPORT, 1, Define to 1 to compile with the GNU Scientific Library)
else
	echo "Compiling without the GNU Scientific Library"
fi


dnl Let people compile without having libecat (z_matrix_70)
AC_ARG_ENABLE(
	libecat, 
	[  --enable-libecat	Compile with the libecat/CTI library [default=yes]],
	enable_libecat="$enableval",
	enable_libecat=yes)

if (test $enable_libecat = yes) && (test $FOUND_LIBECAT = yes); then
	echo "Compiling with libecat/CTI file support"
	AMIDE_LIBECAT_LIBS="-lecat"
	AC_SUBST(AMIDE_LIBECAT_LIBS)
	AC_DEFINE(AMIDE_LIBECAT_SUPPORT, 1, Define to 1 to compile with libecat)
else
	echo "Compiling without libecat/CTI file support"
fi





dnl Let people compile without having libmdc
AC_ARG_ENABLE(
	libmdc, 
	[  --enable-libmdc	Compile with the xmedcon/libmdc library [default=yes]], 
	enable_libmdc="$enableval", 
	enable_libmdc=yes)

if (test $enable_libmdc = yes) && (test $FOUND_MEDCON = yes); then
	echo "Compiling with xmedcon/libmdc file support"
	AMIDE_LIBMDC_LIBS="-lmdc"
	AC_SUBST(AMIDE_LIBMDC_LIBS)
	AC_DEFINE(AMIDE_LIBMDC_SUPPORT, 1, Define to 1 to compile with (X)MedCon)
else
	echo "Compiling without xmedcon/libmdc file support"
fi


dnl Let people compile without rendering/libvolpack
AC_ARG_ENABLE(
	libvolpack, 
	[  --enable-libvolpack	Compile with libvolpack rendering support [default=yes]], 
	enable_libvolpack="$enableval", 
	enable_libvolpack=yes)

if (test $enable_libvolpack = yes) && (test $FOUND_VOLPACK = yes); then
	echo "Compiling with libvolpack rendering support "
	AMIDE_LIBVOLPACK_LIBS="-lvolpack"
	AC_SUBST(AMIDE_LIBVOLPACK_LIBS)
	AC_DEFINE(AMIDE_LIBVOLPACK_SUPPORT, 1, Define to 1 to compile with VolPack)
else
	echo "Compiling without libvolpack rendering support"
fi


dnl Let people compile without mpeg movie generation/libfame
AC_ARG_ENABLE(
	libfame,
	[  --enable-libfame   	Compile with libfame mpeg encoding support [default=yes]], 
	enable_libfame="$enableval", 
	enable_libfame=yes)

if (test $enable_libfame = yes) && (test $FOUND_LIBFAME = yes); then
	echo "Compiling with libfame mpeg encoding support "
	AMIDE_LIBFAME_LIBS="-lfame"
	AC_SUBST(AMIDE_LIBFAME_LIBS)
	AC_DEFINE(AMIDE_LIBFAME_SUPPORT, 1, Define to 1 to compile with Libfame)
else
	echo "Compiling without libfame mpeg encoding support"
fi



AC_SUBST(EXTRA_GNOME_LIBS)
AC_SUBST(EXTRA_GNOME_CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

AC_CONFIG_FILES([
Makefile
pixmaps/Makefile
help/Makefile
help/C/Makefile
doc/Makefile
doc/reference/Makefile
doc/reference/sgml/Makefile
doc/reference/tmpl/Makefile
omf-install/Makefile
src/Makefile
etc/Makefile
etc/amide-$VERSION-1.info:etc/amide.info.in
etc/amide.spec])
AC_OUTPUT 

