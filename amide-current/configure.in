AC_INIT(src/amide.c)

dnl First, setup the libary source directory
cp -f src/*.c src/*.h src/*.m4 lib/lib_src/*.h lib/lib_src/*.c lib

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(amide, 0.4.7)

AM_MAINTAINER_MODE
AM_ACLOCAL_INCLUDE(macros)


GNOME_INIT
AM_PATH_GTK(1.2.0)
AM_PATH_GDK_PIXBUF(0.11.0)
GNOME_XML2_CHECK

dnl AC_ISC_POSIX


AC_PROG_CC
AM_PROG_LIBTOOL()

dnl pick our optimization level, OSX's version of gcc doesn't handle -O6
case "$host_os" in
darwin*) 	CFLAGS="-g -O2";;
*)		CFLAGS="-g -O6";;
esac

if test $CC = "gcc"; then
	echo -n "checking version of gcc... "
	CC_VERSION=`$CC --version`
	if test $CC_VERSION = "2.96"; then
		echo $CC_VERSION
		echo "******************************************************************"
		echo "This version of gcc is a beta compiler and often incorrectly"
		echo "compiles this program.  Please upgrade to the current version of"
		echo "gcc (3.0.2 as of this writing) or downgrade to 2.95.3"
		echo "******************************************************************"
		echo -n "continue anyway? (y/n) "
		read continue_with_bad_gcc
		if test $continue_with_bad_gcc = "y"; then
			echo "removing optimizations to reduce potential of compiler error"
			CFLAGS="-g -O0"
		else
			exit 1
		fi
	elif test $CC_VERSION = "3.0.2"; then
		echo "$CC_VERSION, good"
	else
		echo $CC_VERSION
	fi
fi

dnl AC_STDC_HEADERS
dnl AC_ARG_PROGRAM
AC_PATH_PROGS(M4, gnum4 gm4 m4, m4)

GNOME_COMPILE_WARNINGS

ALL_LINGUAS=
dnl AM_GNU_GETTEXT

EXTRA_GNOME_LIBS=`gnome-config --libs gnomeui gdk_pixbuf gnomecanvaspixbuf`
EXTRA_GNOME_CFLAGS=`gnome-config --cflags gnomeui gdk_pixbuf gnomecanvaspixbuf`



dnl add the -no-cpp-precomp for macintosh os x
case "$host_os" in
darwin*) 	echo "removing preproccessor precompilition on macintosh os x" ; 
		CPPFLAGS="$CPPFLAGS -no-cpp-precomp" ;;
esac




dnl Let people compile without debugging information
AC_ARG_ENABLE(
	amide_debug, 
	[  --enable-amide-debug	Compile with some debugging messages [default=yes]], 
	enable_amide_debug="$enableval", 
	enable_amide_debug=yes)

if test $enable_amide_debug = yes; then
	echo "Compiling with AMIDE debugging messages"
	AMIDE_DEBUG_CFLAGS="-g"
	AC_SUBST(AMIDE_DEBUG_CFLAGS)
	AC_DEFINE(AMIDE_DEBUG)
else
	echo "Compiling without AMIDE debugging messages"
fi




dnl Let people compile without having libecat (z_matrix_70)
AC_CHECK_LIB(ecat, matrix_open, FOUND_LIBECAT=yes, FOUND_LIBECAT=no)
AC_ARG_ENABLE(
	libecat, 
	[  --enable-libecat	Compile with the libecat/CTI library [default=yes]],
	enable_libecat="$enableval",
	enable_libecat=yes)

if (test $enable_libecat = yes) && (test $FOUND_LIBECAT = yes); then
	echo "Compiling with libecat/CTI file support"
	AMIDE_LIBECAT_LIBS="-lecat"
	AC_SUBST(AMIDE_LIBECAT_LIBS)
	AC_DEFINE(AMIDE_LIBECAT_SUPPORT)
else
	echo "Compiling without libecat/CTI file support"
fi





dnl Check that we have libmdc and let people compile without having libmdc
AC_CHECK_LIB(mdc, MdcOpenFile, FOUND_MEDCON=yes, FOUND_MEDCON=no)
AC_ARG_ENABLE(
	libmdc, 
	[  --enable-libmdc	Compile with the xmedcon/libmdc library [default=yes]], 
	enable_libmdc="$enableval", 
	enable_libmdc=yes)

if (test $enable_libmdc = yes) && (test $FOUND_MEDCON = yes); then
	echo "Compiling with xmedcon/libmdc file support"
	AMIDE_LIBMDC_LIBS="-lmdc"
	AC_SUBST(AMIDE_LIBMDC_LIBS)
	AC_DEFINE_UNQUOTED(AMIDE_LIBMDC_SUPPORT)
else
	echo "Compiling without xmedcon/libmdc file support"
fi


dnl Check that we have libvolpack on the system and let people compile without rendering/libvolpack
AC_CHECK_LIB(volpack, vpGetErrorString, FOUND_VOLPACK=yes, FOUND_VOLPACK=no, -lm)
AC_ARG_ENABLE(
	libvolpack, 
	[  --enable-libvolpack	Compile with libvolpack rendering support [default=yes]], 
	enable_libvolpack="$enableval", 
	enable_libvolpack=yes)

if (test $enable_libvolpack = yes) && (test $FOUND_VOLPACK = yes); then
	echo "Compiling with libvolpack rendering support "
	AMIDE_LIBVOLPACK_LIBS="-lvolpack"
	AC_SUBST(AMIDE_LIBVOLPACK_LIBS)
	AC_DEFINE_UNQUOTED(AMIDE_LIBVOLPACK_SUPPORT)
else
	echo "Compiling without libvolpack rendering support"
fi


dnl Check that we have mpeg_encode on the system and let people compile without mpeg_encode
AC_PATH_PROG(MPEG_ENCODE, mpeg_encode) 
AC_ARG_ENABLE(
	mpeg_encode, 
	[  --enable-mpeg-encode	Compile with mpeg_encode movie support [default=yes]], 
	enable_mpeg_encode="$enableval", 
	enable_mpeg_encode=yes)

if (test $enable_mpeg_encode = yes) && (test -x $MPEG_ENCODE); then
	echo "Compiling with mpeg_encode movie support "
	AC_DEFINE_UNQUOTED(AMIDE_MPEG_ENCODE_BIN, "mpeg_encode")
	AC_DEFINE_UNQUOTED(AMIDE_MPEG_ENCODE_SUPPORT)
else
	echo "Compiling without mpeg_encode movie support"
fi



dnl Don't compile library by default */
AC_ARG_ENABLE(
	libamide, 
	[  --enable-libamide	Compile a library that exports amide's functions [default=no]], 
	enable_libamide="$enableval", 
	enable_libamide=no)

AM_CONDITIONAL(BUILD_LIBAMIDE, test $enable_libamide = yes)
if test $enable_libamide = yes; then
	echo "Compiling libamide in addition to amide"
else
	echo "Not compiling libamide (default)"
fi

AC_SUBST(EXTRA_GNOME_LIBS)
AC_SUBST(EXTRA_GNOME_CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

AC_OUTPUT([
Makefile
pixmaps/Makefile
doc/Makefile
doc/C/Makefile
src/Makefile
lib/Makefile
lib/lib_src/Makefile
etc/Makefile
etc/amide.spec]) 

